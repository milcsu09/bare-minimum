
printf(fmt) : (*U8, ...) -> Void;

malloc(n) : (U64) -> *Void;
calloc(n, m) : (U64, U64) -> *Void;
free(p) : (*Void) -> Void;

strcpy(d, s) : (*U8, *U8) -> *U8;
strncpy(d, s, i) : (*U8, *U8, U64) -> *U8;

alias U64 as USize;

alias
  [
    type : U64
  ] as Token;

alias
  [
    current : *U8
  ] as Lexer;

lexerNext(lexer) : (*Lexer) -> Token =
  {
    token : Token;

    token.type = -1;

    char := *(*lexer.current);

    if char == '(' then
      token.type = 0;
    else if char == ')' then
      token.type = 1;
    else if char == '+' then
      token.type = 2;
    else if char == '-' then
      token.type = 3;
    else if char == '*' then
      token.type = 4;
    else if char == '/' then
      token.type = 5;

    if token.type != -1 then
      *lexer.current = (*lexer.current) + 1;

    token
  };

__main(argc, argv) : (I32, **U8) -> Void =
  {
    lexer : Lexer = ["(+-*/)"];
    token : Token;

    while { token = lexerNext(&lexer); token.type } != -1 then
      printf("%d\n", token.type);

  };

