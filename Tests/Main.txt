
printf(fmt) : (*U8, ...) -> Void;

calloc(n, m) : (U64, U64) -> *Void;
free(p) : (*Void) -> Void;


alias
  [
    value : I64,
    next : *Void
  ] as Node;


node_create(value) : (I64) -> *Node =
  {
    node := calloc(1, 16) as *Node;

    *node.value = value;
    *node.next = 0 as *Void;

    node
  };


node_free(node) : (*Node) -> Void =
  {
    if *node.next as I64 != 0 then
      node_free(*node.next);
    free(node);
  };


__main(argc, argv) : (I32, **U8) -> Void =
  {
    root := node_create(12);
    defer node_free(root);

    a := node_create(34);
    b := node_create(56);

    *a.next = b;
    *root.next = a;

    current := root;

    while current as I64 != 0 then
      {
        printf("%d", *current.value);
        current = *current.next;

        if current as I64 != 0 then
          printf(" -> ");
        else
          printf("\n");
      };
  };

